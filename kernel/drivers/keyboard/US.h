// US keyboard

#pragma once

#include "scan_codes.h"

typedef enum {
	
	US_KB_KEY_PRESS_RESERVED = KEY_PRESS_RESERVED,
	US_KB_KEY_PRESS_ESCAPE   = KEY_PRESS_ESCAPE,
	
	US_KB_KEY_PRESS_1 = KEY_PRESS_1,
	US_KB_KEY_PRESS_2 = KEY_PRESS_2,
	US_KB_KEY_PRESS_3 = KEY_PRESS_3,
	US_KB_KEY_PRESS_4 = KEY_PRESS_4,
	US_KB_KEY_PRESS_5 = KEY_PRESS_5,
	US_KB_KEY_PRESS_6 = KEY_PRESS_6,
	US_KB_KEY_PRESS_7 = KEY_PRESS_7,
	US_KB_KEY_PRESS_8 = KEY_PRESS_8,
	US_KB_KEY_PRESS_9 = KEY_PRESS_9,
	US_KB_KEY_PRESS_0 = KEY_PRESS_0,
	
	US_KB_KEY_PRESS_MINUS     = KEY_PRESS_MINUS, // '-'
	US_KB_KEY_PRESS_EQUAL     = KEY_PRESS_EQUAL, // '='
	US_KB_KEY_PRESS_BACKSPACE = KEY_PRESS_BACKSPACE,
	US_KB_KEY_PRESS_TAB       = KEY_PRESS_TAB,
	
	US_KB_KEY_PRESS_Q = KEY_PRESS_Q,
	US_KB_KEY_PRESS_W = KEY_PRESS_W,
	US_KB_KEY_PRESS_E = KEY_PRESS_E,
	US_KB_KEY_PRESS_R = KEY_PRESS_R,
	US_KB_KEY_PRESS_T = KEY_PRESS_T,
	US_KB_KEY_PRESS_Y = KEY_PRESS_Y,
	US_KB_KEY_PRESS_U = KEY_PRESS_U,
	US_KB_KEY_PRESS_I = KEY_PRESS_I,
	US_KB_KEY_PRESS_O = KEY_PRESS_O,
	US_KB_KEY_PRESS_P = KEY_PRESS_P,
	
	US_KB_KEY_PRESS_LEFT_SQ_BRACKET  = KEY_PRESS_LEFT_SQ_BRACKET,  // '['
	US_KB_KEY_PRESS_RIGHT_SQ_BRACKET = KEY_PRESS_RIGHT_SQ_BRACKET, // ']'
	US_KB_KEY_PRESS_ENTER            = KEY_PRESS_ENTER,
	US_KB_KEY_PRESS_LEFT_CTRL        = KEY_PRESS_LEFT_CTRL,
	
	US_KB_KEY_PRESS_A = KEY_PRESS_A,
	US_KB_KEY_PRESS_S = KEY_PRESS_S,
	US_KB_KEY_PRESS_D = KEY_PRESS_D,
	US_KB_KEY_PRESS_F = KEY_PRESS_F,
	US_KB_KEY_PRESS_G = KEY_PRESS_G,
	US_KB_KEY_PRESS_H = KEY_PRESS_H,
	US_KB_KEY_PRESS_J = KEY_PRESS_J,
	US_KB_KEY_PRESS_K = KEY_PRESS_K,
	US_KB_KEY_PRESS_L = KEY_PRESS_L,
	
	US_KB_KEY_PRESS_SEMI_COLON = KEY_PRESS_SEMI_COLON, // ';'
	US_KB_KEY_PRESS_APOSTROPHE = KEY_PRESS_APOSTROPHE, // '''
	US_KB_KEY_PRESS_GRAVE      = KEY_PRESS_GRAVE,      // '`'
	US_KB_KEY_PRESS_LEFT_SHIFT = KEY_PRESS_LEFT_SHIFT,
	US_KB_KEY_PRESS_BACK_SLASH = KEY_PRESS_BACK_SLASH, // '\'
	
	US_KB_KEY_PRESS_Z = KEY_PRESS_Z,
	US_KB_KEY_PRESS_X = KEY_PRESS_X,
	US_KB_KEY_PRESS_C = KEY_PRESS_C,
	US_KB_KEY_PRESS_V = KEY_PRESS_V,
	US_KB_KEY_PRESS_B = KEY_PRESS_B,
	US_KB_KEY_PRESS_N = KEY_PRESS_N,
	US_KB_KEY_PRESS_M = KEY_PRESS_M,
	
	US_KB_KEY_PRESS_COMMA       = KEY_PRESS_COMMA,       // ','
	US_KB_KEY_PRESS_DOT         = KEY_PRESS_DOT,         // '.'
	US_KB_KEY_PRESS_SLASH       = KEY_PRESS_SLASH,       // '/'
	US_KB_KEY_PRESS_RIGHT_SHIFT = KEY_PRESS_RIGHT_SHIFT,
	US_KB_KEY_PRESS_KP_ASTERISK = KEY_PRESS_KP_ASTERISK, // '*' (keypad)
	US_KB_KEY_PRESS_LEFT_ALT    = KEY_PRESS_LEFT_ALT,
	US_KB_KEY_PRESS_SPACE       = KEY_PRESS_SPACE,       // ' '
	US_KB_KEY_PRESS_CAPS_LOCK   = KEY_PRESS_CAPS_LOCK,
	
	US_KB_KEY_PRESS_F1  = KEY_PRESS_F1,
	US_KB_KEY_PRESS_F2  = KEY_PRESS_F2,
	US_KB_KEY_PRESS_F3  = KEY_PRESS_F3,
	US_KB_KEY_PRESS_F4  = KEY_PRESS_F4,
	US_KB_KEY_PRESS_F5  = KEY_PRESS_F5,
	US_KB_KEY_PRESS_F6  = KEY_PRESS_F6,
	US_KB_KEY_PRESS_F7  = KEY_PRESS_F7,
	US_KB_KEY_PRESS_F8  = KEY_PRESS_F8,
	US_KB_KEY_PRESS_F9  = KEY_PRESS_F9,
	US_KB_KEY_PRESS_F10 = KEY_PRESS_F10,
	
	US_KB_KEY_PRESS_NUM_LOCK    = KEY_PRESS_NUM_LOCK,
	US_KB_KEY_PRESS_SCROLL_LOCK = KEY_PRESS_SCROLL_LOCK,
	
	US_KB_KEY_PRESS_KP_7     = KEY_PRESS_KP_7,
	US_KB_KEY_PRESS_KP_8     = KEY_PRESS_KP_8,
	US_KB_KEY_PRESS_KP_9     = KEY_PRESS_KP_9,
	
	US_KB_KEY_PRESS_KP_MINUS = KEY_PRESS_KP_MINUS, // '-' (keypad)
	
	US_KB_KEY_PRESS_KP_4     = KEY_PRESS_KP_4,
	US_KB_KEY_PRESS_KP_5     = KEY_PRESS_KP_5,
	US_KB_KEY_PRESS_KP_6     = KEY_PRESS_KP_6,
	
	US_KB_KEY_PRESS_KP_PLUS  = KEY_PRESS_KP_PLUS, // '+' (keypad)
	
	US_KB_KEY_PRESS_KP_1     = KEY_PRESS_KP_1,
	US_KB_KEY_PRESS_KP_2     = KEY_PRESS_KP_2,
	US_KB_KEY_PRESS_KP_3     = KEY_PRESS_KP_3,
	US_KB_KEY_PRESS_KP_0     = KEY_PRESS_KP_0,
	
	US_KB_KEY_PRESS_KP_DOT   = KEY_PRESS_KP_DOT, // '.' (keypad)
	
	US_KB_KEY_UNKNOWN_SCANCODE_84 = KEY_UNKNOWN_SCANCODE_84, // does not exist ?
	
	US_KB_KEY_PRESS_ZENKAKU_HANKAKU = KEY_PRESS_ZENKAKU_HANKAKU, // 'idfk' (japanese?)
	
	US_KB_KEY_PRESS_102ND = KEY_PRESS_102ND, // non-US '\' and '|'
	
	US_KB_KEY_PRESS_F11 = KEY_PRESS_F11,
	US_KB_KEY_PRESS_F12 = KEY_PRESS_F12,
	
	US_KB_KEY_PRESS_RO                  = KEY_PRESS_RO,                // 'idfk' (japanese?)
	US_KB_KEY_PRESS_KATAKANA            = KEY_PRESS_KATAKANA,          // 'idfk' (japanese?)
	US_KB_KEY_PRESS_HIRAGANA            = KEY_PRESS_HIRAGANA,          // 'idfk' (japanese?)
	US_KB_KEY_PRESS_HENKAN              = KEY_PRESS_HENKAN,            // 'idfk' (japanese?) [right of spacebar]
	US_KB_KEY_PRESS_KATAKANA_HIRAGANA   = KEY_PRESS_KATAKANA_HIRAGANA, // 'idfk' (japanese?)
	US_KB_KEY_PRESS_MUHENKAN            = KEY_PRESS_MUHENKAN,          // 'idfk' (japanese?) [left of spacebar]
	US_KB_KEY_PRESS_KP_JP_COMMA         = KEY_PRESS_KP_JP_COMMA,       // japanese comma (keypad)
	
	US_KB_KEY_PRESS_KP_ENTER      = KEY_PRESS_KP_ENTER,
	US_KB_KEY_PRESS_KP_RIGHT_CTRL = KEY_PRESS_KP_RIGHT_CTRL,
	US_KB_KEY_PRESS_KP_SLASH      = KEY_PRESS_KP_SLASH, // '/' (keypad)
	
	US_KB_KEY_PRESS_SYSRQ = KEY_PRESS_SYSRQ, // SysRq (kernel panic)
	
	US_KB_KEY_PRESS_RIGHT_ALT     = KEY_PRESS_RIGHT_ALT,
	US_KB_KEY_PRESS_LINE_FEED     = KEY_PRESS_LINE_FEED,
	US_KB_KEY_PRESS_HOME          = KEY_PRESS_HOME,
	US_KB_KEY_PRESS_UP            = KEY_PRESS_UP,
	US_KB_KEY_PRESS_PAGE_UP       = KEY_PRESS_PAGE_UP,
	US_KB_KEY_PRESS_LEFT          = KEY_PRESS_LEFT,
	US_KB_KEY_PRESS_RIGHT         = KEY_PRESS_RIGHT,
	US_KB_KEY_PRESS_END           = KEY_PRESS_END,
	US_KB_KEY_PRESS_DOWN          = KEY_PRESS_DOWN,
	US_KB_KEY_PRESS_PAGE_DOWN     = KEY_PRESS_PAGE_DOWN,
	US_KB_KEY_PRESS_INSERT        = KEY_PRESS_INSERT,
	US_KB_KEY_PRESS_DELETE        = KEY_PRESS_DELETE,
	US_KB_KEY_PRESS_MACRO         = KEY_PRESS_MACRO,
	US_KB_KEY_PRESS_MUTE          = KEY_PRESS_MUTE,
	US_KB_KEY_PRESS_VOLUME_DOWN   = KEY_PRESS_VOLUME_DOWN,
	US_KB_KEY_PRESS_VOLUME_UP     = KEY_PRESS_VOLUME_UP,
	US_KB_KEY_PRESS_POWER         = KEY_PRESS_POWER,
	US_KB_KEY_PRESS_KP_EQUAL      = KEY_PRESS_KP_EQUAL,      // '=' (keypad)
	US_KB_KEY_PRESS_KP_PLUS_MINUS = KEY_PRESS_KP_PLUS_MINUS, // 'Â±' (keypad)
	US_KB_KEY_PRESS_PAUSE         = KEY_PRESS_PAUSE,
	US_KB_KEY_PRESS_SCALE         = KEY_PRESS_SCALE,
	US_KB_KEY_PRESS_KP_COMMA      = KEY_PRESS_KP_COMMA,      // ',' (keypad)
	US_KB_KEY_PRESS_HAGEUL        = KEY_PRESS_HAGEUL,        // tf ? ? ?
	US_KB_KEY_PRESS_HAGUEL        = KEY_PRESS_HAGUEL,        // tf ?????
	US_KB_KEY_PRESS_HANJA         = KEY_PRESS_HANJA,         // 'idfk' (japanese?)
	US_KB_KEY_PRESS_YEN           = KEY_PRESS_YEN,           // 'idfk' (japanese?)
	US_KB_KEY_PRESS_LEFT_META     = KEY_PRESS_LEFT_META,
	US_KB_KEY_PRESS_RIGHT_META    = KEY_PRESS_RIGHT_META,
	US_KB_KEY_PRESS_COMPOSE       = KEY_PRESS_COMPOSE
	
} US_KB;

const char _us_kb_2_127[] = {
	
//   res, // idx, US_KB enum alias
	'\0', //   0, US_KB_KEY_PRESS_RESERVED
	'\0', //   1, US_KB_KEY_PRESS_ESCAPE
	 '1', //   2, US_KB_KEY_PRESS_1
	 '2', //   3, US_KB_KEY_PRESS_2
	 '3', //   4, US_KB_KEY_PRESS_3
	 '4', //   5, US_KB_KEY_PRESS_4
	 '5', //   6, US_KB_KEY_PRESS_5
	 '6', //   7, US_KB_KEY_PRESS_6
	 '7', //   8, US_KB_KEY_PRESS_7
	 '8', //   9, US_KB_KEY_PRESS_8
	 '9', //  10, US_KB_KEY_PRESS_9
	 '0', //  11, US_KB_KEY_PRESS_0
.......................................................................:::::::::XD
};

char us_kb_char(US_KB keycode) {
	if (key_code <= 127) {
		return _us_kb_2_127[keycode];
	}
	return '\0';
}
